package expression.sentence;

import expression.Expression;
import logicalreasoner.inference.Inference;
import logicalreasoner.truthassignment.TruthAssignment;

import java.util.ArrayList;

/**
 * The Sentence class represents any type of logical
 * Sentence, (ie. Constant, Atom, Predicate, or generated by connectives)
 */
public abstract class Sentence extends Expression {
  protected ArrayList<Sentence> args;

  protected Sentence(ArrayList<Sentence> a, String n, String s) {
    super(n, s);
    args = a;
  }

  public abstract Boolean eval(TruthAssignment h);

  public abstract Inference reason(TruthAssignment h, int inferenceNum, int justificationNum);

  public String toString() {
    //return toSymbol();

    StringBuilder builder = new StringBuilder();
    builder.append("(").append(name);
    args.forEach(arg -> builder.append(" ").append(arg));
    builder.append(")");
    return builder.toString();
  }

  public String toSymbol() {
    if (!args.isEmpty()) {
      StringBuilder builder = new StringBuilder();
      builder.append("(");
      for (int i = 0; i < args.size() - 1; ++i) {
        builder.append(args.get(i).toSymbol()).append(" ").append(symbol).append(" ");
      }
      builder.append(args.get(args.size() - 1).toSymbol()).append(")");
      return builder.toString();
    }
    return symbol;
  }

  public int hashCode() {
    return toString().hashCode();
  }

  public boolean equals(Object o) {
    if (o instanceof Sentence) {
      Sentence s = (Sentence) o;
      if (!s.name.equals(name) || s.args.size() != args.size())
        return false;

      for (int i = 0; i < args.size(); ++i) {
        if (!args.get(i).equals(s.args.get(i)))
          return false;
      }

      return true;
    }
    return false;
  }

  public int numArgs() {
    return args.size();
  }

  public int size() {
    return args.stream().mapToInt(Sentence::size).sum() + numArgs();
  }
}
